{"version":3,"sources":["webpack://openapi-examples-validator/./node_modules/ajv-oai/lib/constants.js","webpack://openapi-examples-validator/./node_modules/ajv-oai/lib/format-validator.js","webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/impl/service/disallow-additional-properties.js","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/./node_modules/ajv/lib/refs/json-schema-draft-04.json","webpack://openapi-examples-validator/external \"ajv\"","webpack://openapi-examples-validator/external \"decimal.js\"","webpack://openapi-examples-validator/external \"errno\"","webpack://openapi-examples-validator/external \"fs\"","webpack://openapi-examples-validator/external \"glob\"","webpack://openapi-examples-validator/external \"json-pointer\"","webpack://openapi-examples-validator/external \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external \"jsonpath-plus\"","webpack://openapi-examples-validator/external \"lodash.clonedeep\"","webpack://openapi-examples-validator/external \"lodash.flatmap\"","webpack://openapi-examples-validator/external \"lodash.flatten\"","webpack://openapi-examples-validator/external \"lodash.merge\"","webpack://openapi-examples-validator/external \"path\"","webpack://openapi-examples-validator/external \"yaml\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"names":["Decimal","RANGES","byte","min","max","int32","int64","float","pow","negated","double","module","exports","data","Number","isInteger","greaterThanOrEqualTo","lessThanOrEqualTo","len","length","test","firstPaddingChar","indexOf","merge","require","ENOENT","ErrorType","jsENOENT","code","jsonPathNotFound","errorAndErrorsMutuallyExclusive","parseError","validation","ApplicationError","err","message","path","cause","type","options","params","constructor","Object","assign","this","parent","parentProperty","pointer","value","implV2","implV3","REGEX__OPEN_API","getImplementation","openapiSpec","swagger","openapi","match","JSONPath","jsonPath","ResultType","JSON_PATHS__OBJECTS","_callbackObjectTypeForNoAdditionalProperties","additionalProperties","_find","json","resultType","callback","flatten","setNoAdditionalProperties","openApiSpec","examplePaths","paths","Set","forEach","jsPath","add","examplePath","exampleMatch","startsWith","delete","_excludeExamples","cloneDeep","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","toPathString","_getSchemaPathOfExample","prepare","noAdditionalProperties","openapiSpecCopy","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","create","pathContext","toPointer","_throwMutuallyExclusiveError","set","flatMap","fs","glob","yaml","refParser","createError","getValidatorFactory","compileValidate","Determiner","createValidationResponse","dereferenceJsonSchema","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","async","validateExamples","impl","dereference","res","pathToExamples","concat","jsonPathToExamples","_extractExamplePaths","statistics","_initStatistics","validationResult","valid","errors","createValidator","_initValidatorFactory","error","push","keys","example","_getObjectByPath","schema","_extractSchema","curErrors","_validateExample","map","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","jsonSchema","extension","split","pop","includes","_isFileTypeYaml","parse","readFileSync","e","name","JSON","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","cwdToMappingFile","dirPathMapExternalExamples","entries","filePathsExample","filePathExample","resolvedFilePathExample","join","examplesTotal","examplesWithoutSchema","defineProperty","enumerable","size","wrap","validate","exampleFilePath","specSchema","schemaId","allErrors","nullable","suppressErrorIfNotFound","validateFile","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","matchingFilePathsMapping","filePathsMaps","sync","nonull","responses","filePathMapExternalExamples","dirname","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","pathToSchema","currentWorkingDir","process","cwd","chdir","dereferencedSchema","JsonPointer","Ajv","FormatValidator","draft4MetaSchema","JSON_PATH__REFS","ID__SPEC_SCHEMA","preparedSpecSchema","refSchema","substring","definition","_createReferenceSchema","validator","removeSchema","addMetaSchema","id","_opts","defaultMeta","_applyDraft04Schema","addFormat","_addFormatValidators","addSchema","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","result","payload","compile","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"index.js","sourcesContent":["const Decimal = require('decimal.js');\n\n// Numeric type ranges\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\n// https://msdn.microsoft.com/en-us/library/s3f49ktz.aspx\n// https://en.wikipedia.org/wiki/C_data_types\n\nconst RANGES = {\n  byte: {\n    min: new Decimal('-128'),\n    max: new Decimal('127'),\n  },\n\n  int32: {\n    min: new Decimal('-2147483648'),\n    max: new Decimal('2147483647'),\n  },\n\n  int64: {\n    min: new Decimal('-9223372036854775808'),\n    max: new Decimal('9223372036854775807'),\n  },\n\n  float: {\n    min: new Decimal(2).pow(128).negated(),\n    max: new Decimal(2).pow(128),\n  },\n\n  double: {\n    min: new Decimal(2).pow(1024).negated(),\n    max: new Decimal(2).pow(1024),\n  },\n};\n\nmodule.exports = RANGES;\n","const RANGES = require('./constants');\n\n/**\n * OpenAPI 2.0 data types format\n * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types\n */\n\n/**\n * Check that the data is integer and int32\n * @param {number} data\n * @returns {boolean}\n */\nfunction int32(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int32.max.greaterThanOrEqualTo(data) &&\n    RANGES.int32.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is integer and int64\n * @param {number} data\n * @returns {boolean}\n */\nfunction int64(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int64.max.greaterThanOrEqualTo(data) &&\n    RANGES.int64.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is float\n * @param {number} data\n * @returns {boolean}\n */\nfunction float(data) {\n  return (\n    RANGES.float.max.greaterThanOrEqualTo(data) &&\n    RANGES.float.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is double\n * @param {number} data\n * @returns {boolean}\n */\nfunction double(data) {\n  return (\n    RANGES.double.max.greaterThanOrEqualTo(data) &&\n    RANGES.double.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is string and base64 encoded characters.\n * https://github.com/chriso/validator.js/blob/master/src/lib/isBase64.js\n * @param {string} data\n * @returns {boolean}\n */\nfunction byte(data) {\n  /* eslint-disable no-useless-escape */\n  const notBase64 = /[^A-Z0-9+\\/=]/i;\n  /* eslint-enable no-useless-escape */\n\n  const len = data.length;\n  if (!len || len % 4 !== 0 || notBase64.test(data)) {\n    return false;\n  }\n  const firstPaddingChar = data.indexOf('=');\n  return firstPaddingChar === -1 ||\n    firstPaddingChar === len - 1 ||\n    (firstPaddingChar === len - 2 && data[len - 1] === '=');\n}\n\nmodule.exports = {\n  int32,\n  int64,\n  float,\n  double,\n  byte,\n};\n","const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nconst JSON_PATHS__OBJECTS = [\n    '$..application/json.schema',\n    '$..schema..[?(@.properties && (@property === \"schema\" || @property === \"items\" || @.type === \"object\"))]'\n];\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallback}   [callback=_callbackObjectTypeForNoAdditionalProperties] Function to be called on a\n *                                                      match\n * @private\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = [],\n    callback = _callbackObjectTypeForNoAdditionalProperties\n) {\n    // Find all matches\n    const paths = new Set();\n    JSON_PATHS__OBJECTS.forEach(jsPath => {\n        _find(openApiSpec, jsPath)\n            .forEach(match => paths.add(match));\n    });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        _find(openApiSpec, jsPath, ResultType.value, callback);\n    }\n}\n\n/**\n * Callback, to set the `additionalProperties` to `false` the object-schemas\n * @type JsonPathMatchCallback\n * @private\n */\nfunction _callbackObjectTypeForNoAdditionalProperties(value) {\n    value.additionalProperties = false;\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties'),\n    cloneDeep = require('lodash.clonedeep');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLE = '$..responses..content.application/json.example',\n    PATH__EXAMPLES = '$..responses..content.application/json.examples.*.value',\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = '$..requestBody.content.application/json.example',\n    PATH__EXAMPLES__REQUEST_BODY = '$..requestBody.content.application/json.examples.*.value',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPathOfExample(pathExample),\n            pathSchema = jsonPath.toPathString(pathSchemaAsArray),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n *\n * It is assumed that the JSON-path to the example is valid and existing.\n * @param {String}  pathExample JSON-path to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: jsonPath.toPointer(pathContextAsArray)\n        }\n    });\n}\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_extractExamplePaths(openapiSpec, pathToExamples));\n        }, []);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (let filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: filePathMapExternalExamples\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, { noAdditionalProperties } = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties });\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(pathSchema, openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let example = null;\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec),\n                    schema,\n                    example,\n                    statistics,\n                    filePathExample\n                });\n            }\n        );\n    });\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: ResultType.path\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec);\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPaths = Object.keys(validationMap);\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({\n            openapiSpec, createValidator, pathSchema, validationMap, statistics,\n            validationResult\n        });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[pathSchema].forEach(pathExample => {\n        const example = _getObjectByPath(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(pathSchema, openapiSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                schema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: ResultType.value\n    });\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        allErrors: true,\n        nullable: true\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${pathSchema}'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv'),\n    FormatValidator = require('ajv-oai/lib/format-validator'),\n    draft4MetaSchema = require('ajv/lib/refs/json-schema-draft-04.json');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        _applyDraft04Schema(validator);\n        _addFormatValidators(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n\n/**\n * Adds format-validators that are not included in the reference-implementation\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _addFormatValidators(validator) {\n    validator.addFormat('int32', { type: 'number', validate: FormatValidator.int32 });\n    validator.addFormat('int64', { type: 'string', validate: FormatValidator.int64 });\n    validator.addFormat('float', { type: 'number', validate: FormatValidator.float });\n    validator.addFormat('double', { type: 'number', validate: FormatValidator.double });\n    validator.addFormat('byte', { type: 'string', validate: FormatValidator.byte });\n}\n\n/**\n * Adds the JSON schema draft-04 schema as default to the validator.\n * The OpenAPI specifications rely on draft-04 and draft-05.\n * Draft-04 is used here because of recommendations made here: https://json-schema.org/draft-05/README.html\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _applyDraft04Schema(validator) {\n    validator.removeSchema('');\n    validator.addMetaSchema(draft4MetaSchema, draft4MetaSchema.id);\n    validator._opts.defaultMeta = draft4MetaSchema.id;\n}\n","module.exports = {\"id\":\"http://json-schema.org/draft-04/schema#\",\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"description\":\"Core schema meta-schema\",\"definitions\":{\"schemaArray\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#\"}},\"positiveInteger\":{\"type\":\"integer\",\"minimum\":0},\"positiveIntegerDefault0\":{\"allOf\":[{\"$ref\":\"#/definitions/positiveInteger\"},{\"default\":0}]},\"simpleTypes\":{\"enum\":[\"array\",\"boolean\",\"integer\",\"null\",\"number\",\"object\",\"string\"]},\"stringArray\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"minItems\":1,\"uniqueItems\":true}},\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"$schema\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"default\":{},\"multipleOf\":{\"type\":\"number\",\"minimum\":0,\"exclusiveMinimum\":true},\"maximum\":{\"type\":\"number\"},\"exclusiveMaximum\":{\"type\":\"boolean\",\"default\":false},\"minimum\":{\"type\":\"number\"},\"exclusiveMinimum\":{\"type\":\"boolean\",\"default\":false},\"maxLength\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minLength\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"pattern\":{\"type\":\"string\",\"format\":\"regex\"},\"additionalItems\":{\"anyOf\":[{\"type\":\"boolean\"},{\"$ref\":\"#\"}],\"default\":{}},\"items\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/schemaArray\"}],\"default\":{}},\"maxItems\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minItems\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"uniqueItems\":{\"type\":\"boolean\",\"default\":false},\"maxProperties\":{\"$ref\":\"#/definitions/positiveInteger\"},\"minProperties\":{\"$ref\":\"#/definitions/positiveIntegerDefault0\"},\"required\":{\"$ref\":\"#/definitions/stringArray\"},\"additionalProperties\":{\"anyOf\":[{\"type\":\"boolean\"},{\"$ref\":\"#\"}],\"default\":{}},\"definitions\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"properties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"patternProperties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"dependencies\":{\"type\":\"object\",\"additionalProperties\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/stringArray\"}]}},\"enum\":{\"type\":\"array\",\"minItems\":1,\"uniqueItems\":true},\"type\":{\"anyOf\":[{\"$ref\":\"#/definitions/simpleTypes\"},{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/simpleTypes\"},\"minItems\":1,\"uniqueItems\":true}]},\"format\":{\"type\":\"string\"},\"allOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"anyOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"oneOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"not\":{\"$ref\":\"#\"}},\"dependencies\":{\"exclusiveMaximum\":[\"maximum\"],\"exclusiveMinimum\":[\"minimum\"]},\"default\":{}}","module.exports = require(\"ajv\");;","module.exports = require(\"decimal.js\");;","module.exports = require(\"errno\");;","module.exports = require(\"fs\");;","module.exports = require(\"glob\");;","module.exports = require(\"json-pointer\");;","module.exports = require(\"json-schema-ref-parser\");;","module.exports = require(\"jsonpath-plus\");;","module.exports = require(\"lodash.clonedeep\");;","module.exports = require(\"lodash.flatmap\");;","module.exports = require(\"lodash.flatten\");;","module.exports = require(\"lodash.merge\");;","module.exports = require(\"path\");;","module.exports = require(\"yaml\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(442);\n"],"sourceRoot":""}